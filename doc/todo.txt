Ideas: (not in order of priority)

- When reading/parsing commands, first strip away all preceding whitespace, and all leading whitespace, (and maybe comments). That allows e.g. for comments after commands. Something like /^\s*(.*?)\s*(?:#.*)$/

- How do we change values during run-time? Using an interface? Command-line? There probably are parameters that we want to change while playing.

- Unit like delay effect


---------------------------------------------------------------

Working on:

- Create documentation, in some years you might want to use this, but don't know how it works..

- Oh, maybe it's a cool idea to put all documentation in xml or json format, and then using a webpage render it in a cool way

---------------------------------------------------------------

Done:

- Instrument should have some sort of list of key events, so that it is possible that two key events of the same note overlap whenever a note is pressed twice

- Bandpass filter as keyunit? How to implement, is FFT to slow, how would we implement IIR?

- Think about difference between units and keyunits. Are they really different, can the program be simplified so that for e.g. an oscillator we only need one C++ class?

- Create a bandpass filter unit

- Implement a command like 'include' which loads other (relative) files

- Come up with a cool extension for the files, like .synth or .syn

- Implement a keyunit called 'key_velocity', returning the key velocity

- An ADSR envelope should also have an 'start_level', 'attack_level', 'release_level'. This way we can use these envelopes also as pitch envelopes, and for example as a vibrato envelope.

- Classes like Unit(Lead)KeyFrequency/Velocity/Duration etc, can be put in just one class, and then it will be given a type parameter

- Implement units called 'lead_key_frequency', 'lead_key_velocity' oid, which outputs the frequency/velocity of the note that you last played (leading key). Like a lead instrument
